import styled from "@emotion/styled";
import { css } from "@emotion/react";
import { Color, Size, Variant, Radius } from "../common.types";

/* ---------------------------------------------
 *  –ú–∞–ø–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–ø—Å–æ–≤–µ—Ç–µ –∫—ä–º CSS
 * ------------------------------------------- */

// –í—Ä—ä—â–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞ CSS –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∞ –∑–∞ —Ü–≤—è—Ç —Å–ø–æ—Ä–µ–¥ Color –ø—Ä–æ–ø—Å–∞
const resolveColorVar = (color?: Color | string) => {
  // –ê–∫–æ –µ custom string (hex/rgb/var(...)), –≤—Ä—ä—â–∞–º–µ –¥–∏—Ä–µ–∫—Ç–Ω–æ
  if (!color) return "var(--color-primary, #3b82f6)";
  switch (color) {
    case "primary":
      return "var(--color-primary, #3b82f6)";
    case "secondary":
      return "var(--color-secondary, #64748b)";
    case "success":
      return "var(--color-success, #22c55e)";
    case "danger":
      return "var(--color-danger, #ef4444)";
    case "warning":
      return "var(--color-warning, #f59e0b)";
    case "info":
      return "var(--color-info, #06b6d4)";
    default:
      return color;
  }
};

// –ü–∞–¥–∏–Ω–≥ –∏ —à—Ä–∏—Ñ—Ç–æ–≤–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ —Å–ø–æ—Ä–µ–¥ size
const sizeTokens = (size: Size = "md") => {
  switch (size) {
    case "sm":
      return {
        fontSize: "0.875rem",
        lineHeight: "1.25rem",
        paddingY: "0.375rem",
        paddingX: "0.625rem",
        height: "2rem",
        gap: "0.375rem",
        icon: "1rem",
        clearBtn: "1.5rem",
      };
    case "lg":
      return {
        fontSize: "1rem",
        lineHeight: "1.5rem",
        paddingY: "0.625rem",
        paddingX: "0.875rem",
        height: "2.75rem",
        gap: "0.5rem",
        icon: "1.25rem",
        clearBtn: "1.75rem",
      };
    case "md":
    default:
      return {
        fontSize: "0.9375rem",
        lineHeight: "1.375rem",
        paddingY: "0.5rem",
        paddingX: "0.75rem",
        height: "2.5rem",
        gap: "0.5rem",
        icon: "1.125rem",
        clearBtn: "1.625rem",
      };
  }
};

// –†–∞–¥–∏—É—Å —Å–ø–æ—Ä–µ–¥ :root –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏—Ç–µ –∏ Radius –ø—Ä–æ–ø—Å–∞
const radiusVar = (r: Radius = "md") => {
  switch (r) {
    case "sm":
      return "var(--radius-sm, 6px)";
    case "lg":
      return "var(--radius-lg, 14px)";
    case "md":
    default:
      return "var(--radius-md, 10px)";
  }
};

// –û–±—â–∏ —Ü–≤–µ—Ç–æ–≤–µ/–≥—Ä–∞–Ω–∏—Ü–∏/—Ñ–æ–Ω –∑–∞ –∏–Ω–ø—É—Ç
const baseVars = {
  bg: "var(--input-bg, var(--surface-1, #0b0f16))",
  bgFilled: "var(--input-bg-filled, var(--surface-2, #0f1520))",
  text: "var(--input-text, var(--text-primary, #e5e7eb))",
  placeholder: "var(--input-placeholder, var(--text-tertiary, #9ca3af))",
  border: "var(--input-border, var(--border-color, #1f2937))",
  focusRing: "var(--focus-ring, rgba(59,130,246,0.45))",
  disabledBg: "var(--input-bg-disabled, rgba(148,163,184,0.08))",
  disabledText: "var(--input-text-disabled, rgba(148,163,184,0.6))",
  error: "var(--color-danger, #ef4444)",
};

// –°—Ç–∏–ª –∑–∞ –≤–∞—Ä–∏–∞–Ω—Ç (filled | outlined | ghost)
const variantStyles = (variant: Variant = "outlined", color?: Color | string) => {
  const c = resolveColorVar(color);
  switch (variant) {
    case "filled":
      return css`
        background: ${baseVars.bgFilled};
        border: 1px solid ${baseVars.border};
        &:hover {
          border-color: ${c};
        }
        &[data-focused="true"] {
          border-color: ${c};
          box-shadow: 0 0 0 3px ${baseVars.focusRing};
        }
      `;
    case "ghost":
      return css`
        background: transparent;
        border: 1px solid transparent;
        &:hover {
          background: ${baseVars.bgFilled};
          border-color: ${baseVars.border};
        }
        &[data-focused="true"] {
          border-color: ${c};
          box-shadow: 0 0 0 3px ${baseVars.focusRing};
          background: ${baseVars.bg};
        }
      `;
    case "outlined":
    default:
      return css`
        background: ${baseVars.bg};
        border: 1px solid ${baseVars.border};
        &:hover {
          border-color: ${c};
        }
        &[data-focused="true"] {
          border-color: ${c};
          box-shadow: 0 0 0 3px ${baseVars.focusRing};
        }
      `;
  }
};

/* ---------------------------------------------
 *  Styled –µ–ª–µ–º–µ–Ω—Ç–∏
 * ------------------------------------------- */

export interface StyledInputRootProps {
  $variant?: Variant;
  $color?: Color | string;
  $size?: Size;
  $radius?: Radius;
  $fullWidth?: boolean;
  $disabled?: boolean;
  $error?: boolean;
  $multiline?: boolean;
  $hasStartAdornment?: boolean;
  $hasEndAdornment?: boolean;
  $isFocused?: boolean;
}

// –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ä—Ç –æ–±–≥—Ä—ä—â–∞—â –∏–Ω–ø—É—Ç–∞ –∏ –∞–¥–æ—Ä–Ω–º–µ–Ω—Ç–∏—Ç–µ
export const StyledInputRoot = styled.div<StyledInputRootProps>`
  /* –ë–∞–∑–æ–≤–∞ –ø–æ–¥—Ä–µ–¥–±–∞ */
  position: relative;
  display: inline-flex;
  align-items: stretch;
  width: ${({ $fullWidth }) => ($fullWidth ? "100%" : "auto")};
  min-width: 10rem;

  /* –í–∏–∑—É–∞–ª–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */
  color: ${baseVars.text};
  border-radius: ${({ $radius }) => radiusVar($radius)};
  transition: border 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
  ${props => variantStyles(props.$variant, props.$color)};

  /* Disabled —Å—ä—Å—Ç–æ—è–Ω–∏–µ */
  ${({ $disabled }) =>
    $disabled &&
    css`
      cursor: not-allowed;
      opacity: 0.8;
      background: ${baseVars.disabledBg};
      & * {
        color: ${baseVars.disabledText};
      }
    `}

  /* ‚ùó Error —Å—ä—Å—Ç–æ—è–Ω–∏–µ */
  ${({ $error }) =>
    $error &&
    css`
      border-color: ${baseVars.error} !important;
      box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.25) !important;
    `}

  /* –ê—Ç—Ä–∏–±—É—Ç –∑–∞ —Ñ–æ–∫—É—Å, –∫–æ–π—Ç–æ —Å–µ —Å–µ—Ç–≤–∞ –æ—Ç –ª–æ–≥–∏–∫–∞—Ç–∞ */
  &[data-focused="true"] {
    /* –°—Ç–∏–ª—ä—Ç –∏–¥–≤–∞ –æ—Ç variantStyles */
  }
`;

// üìé –ó–æ–Ω–∏ –∑–∞ –∞–¥–æ—Ä–Ω–º–µ–Ω—Ç–∏ (–∏–∫–æ–Ω–∏/—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–∏/—Å–ª–µ–¥ –∏–Ω–ø—É—Ç–∞)
export const StyledAdornment = styled.div<{ $position: "start" | "end"; $size?: Size }>`
  /* –ü–æ–¥—Ä–µ–¥–±–∞ –∏ –æ—Ç—Å—Ç–æ—è–Ω–∏—è */
  display: inline-flex;
  align-items: center;
  justify-content: center;

  /* –†–∞–∑–º–µ—Ä —Å–ø—Ä—è–º–æ size */
  ${({ $size }) => {
    const t = sizeTokens($size);
    return css`
      min-width: ${t.icon};
      padding-inline: ${t.gap};
      font-size: ${t.fontSize};
      line-height: ${t.lineHeight};
    `;
  }}

  /* –ü–æ–∑–∏—Ü–∏—è */
  ${({ $position }) =>
    $position === "start"
      ? css`
          order: 0;
        `
      : css`
          order: 2;
        `}
`;

// –†–µ–∞–ª–Ω–∏—è—Ç input –µ–ª–µ–º–µ–Ω—Ç (–∑–∞ single-line —Ä–µ–∂–∏–º)
export const StyledInputElement = styled.input<{
  $size?: Size;
  $hasStartAdornment?: boolean;
  $hasEndAdornment?: boolean;
  $multiline?: boolean;
  $disabled?: boolean;
}>`
  /* –†–∞–∑–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤—ä—Ç—Ä–µ –≤ root */
  order: 1;
  flex: 1 1 auto;
  width: 100%;
  border: none;
  outline: none;
  background: transparent;
  color: ${baseVars.text};
  font-family: inherit;
  appearance: none;

  /* üå´ Placeholder —Ü–≤—è—Ç */
  &::placeholder {
    color: ${baseVars.placeholder};
    opacity: 1;
  }

  /* –†–∞–∑–º–µ—Ä–∏ —Å–ø–æ—Ä–µ–¥ size –∏ –∞–¥–æ—Ä–Ω–º–µ–Ω—Ç–∏ */
  ${({ $size, $hasStartAdornment, $hasEndAdornment }) => {
    const t = sizeTokens($size);
    const padStart = $hasStartAdornment ? "0" : t.paddingX;
    const padEnd = $hasEndAdornment ? "0" : t.paddingX;
    return css`
      font-size: ${t.fontSize};
      line-height: ${t.lineHeight};
      padding: ${t.paddingY} ${padEnd} ${t.paddingY} ${padStart};
      height: ${t.height};
    `;
  }}

  /* Disabled –∫—É—Ä—Å–æ—Ä */
  ${({ $disabled }) =>
    $disabled &&
    css`
      cursor: not-allowed;
    `}
`;

// Textarea –∑–∞ multiline —Ä–µ–∂–∏–º
export const StyledTextareaElement = styled.textarea<{
  $size?: Size;
  $hasStartAdornment?: boolean;
  $hasEndAdornment?: boolean;
  $disabled?: boolean;
  $rows?: number;
  $minRows?: number;
  $maxRows?: number;
}>`
  order: 1;
  flex: 1 1 auto;
  width: 100%;
  border: none;
  outline: none;
  background: transparent;
  color: ${baseVars.text};
  font-family: inherit;
  resize: vertical;
  appearance: none;

  &::placeholder {
    color: ${baseVars.placeholder};
    opacity: 1;
  }

  ${({ $size, $hasStartAdornment, $hasEndAdornment }) => {
    const t = sizeTokens($size);
    const padStart = $hasStartAdornment ? "0" : t.paddingX;
    const padEnd = $hasEndAdornment ? "0" : t.paddingX;
    return css`
      font-size: ${t.fontSize};
      line-height: ${t.lineHeight};
      padding: ${t.paddingY} ${padEnd} ${t.paddingY} ${padStart};
      min-height: calc(${t.lineHeight} * 3 + ${t.paddingY} * 2); /* üßÆ —Ä–∞–∑—É–º–µ–Ω –º–∏–Ω–∏–º—É–º */
    `;
  }}

  ${({ $disabled }) =>
    $disabled &&
    css`
      cursor: not-allowed;
    `}
`;

// –ë—É—Ç–æ–Ω –∑–∞ –∏–∑—á–∏—Å—Ç–≤–∞–Ω–µ (X), –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–∞–Ω –≤ –∫—Ä–∞—è
export const StyledClearButton = styled.button<{
  $size?: Size;
  $hasEndAdornment?: boolean;
  $disabled?: boolean;
}>`
  /* –ü–æ–∑–∏—Ü–∏—è –∏ –≤–∏–¥ */
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  right: ${({ $hasEndAdornment }) => ($hasEndAdornment ? "2.25rem" : "0.5rem")};
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border: none;
  outline: none;
  cursor: pointer;
  background: transparent;

  /* –†–∞–∑–º–µ—Ä–∏ —Å–ø–æ—Ä–µ–¥ size */
  ${({ $size }) => {
    const t = sizeTokens($size);
    return css`
      width: ${t.clearBtn};
      height: ${t.clearBtn};
      font-size: ${t.icon};
    `;
  }}

  /* –í–∏–∑–∏—è */
  color: ${baseVars.placeholder};
  border-radius: 999px;
  transition: background 0.15s ease, color 0.15s ease, opacity 0.15s ease;

  &:hover {
    background: rgba(148, 163, 184, 0.15);
    color: ${baseVars.text};
  }

  /* Disabled —Å—ä—Å—Ç–æ—è–Ω–∏–µ */
  ${({ $disabled }) =>
    $disabled &&
    css`
      cursor: not-allowed;
      opacity: 0.5;
      pointer-events: none;
    `}

  /* üßë‚Äçü¶Ø –î–æ—Å—Ç—ä–ø–Ω–æ—Å—Ç (—Ñ–æ–∫—É—Å) */
  &:focus-visible {
    box-shadow: 0 0 0 2px ${baseVars.focusRing};
  }
`;

// –í—ä—Ç—Ä–µ—à–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞ –ø—Ä–∞–≤–∏–ª–Ω–æ –æ—Ç–º–µ—Å—Ç–≤–∞–Ω–µ –ø—Ä–∏ –∞–¥–æ—Ä–Ω–º–µ–Ω—Ç–∏
export const StyledField = styled.div<{
  $size?: Size;
  $hasStartAdornment?: boolean;
  $hasEndAdornment?: boolean;
}>`
  position: relative;
  flex: 1 1 auto;
  display: flex;
  align-items: center;

  ${({ $size, $hasStartAdornment, $hasEndAdornment }) => {
    const t = sizeTokens($size);
    const padStart = $hasStartAdornment ? "0" : t.paddingX;
    const padEnd = $hasEndAdornment ? "0" : t.paddingX;
    return css`
      padding-inline-start: ${padStart};
      padding-inline-end: ${padEnd};
      gap: ${t.gap};
    `;
  }}
`;
